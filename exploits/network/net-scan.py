from core.modular import Module
from scapy.all import ARP, Ether, srp
import netifaces as ni

class Exploit(Module):

    def __init__(self):
        """
        Initialize an Exploit object with default attributes.

        The attributes 'name', 'description', 'author', and 'creation_date' are initialized
        with example values for demonstration purposes.
        """
        self.name           = "net-scan"
        self.description    = "Scan your network for active Devices."
        self.author         = "oromos"
        self.creation_date  = "15-11-2023"

    def execute(self):
        """
        Execute the network scanning logic.

        This method finds the current gateway's IP address and scans all devices on the
        same network as the gateway. It prints their IP and MAC addresses.
        """
        gateway_ip = ni.gateways()['default'][ni.AF_INET][0]

        ip_parts = gateway_ip.split('.')
        subnet = f"{ip_parts[0]}.{ip_parts[1]}.{ip_parts[2]}.0/24"

        arp = ARP(pdst=subnet)
        ether = Ether(dst="ff:ff:ff:ff:ff:ff")
        packet = ether / arp

        result = srp(packet, timeout=3, verbose=0, retry=3)[0]

        devices = []
        for sent, received in result:
            devices.append({"ip": received.psrc, "mac": received.hwsrc})

        if devices:
            print("Local Hosts\tMac Addresses")
            for device in devices:
                print(f"{device['ip']}\t{device['mac']}")
        else:
            print("No devices found on the network.")
